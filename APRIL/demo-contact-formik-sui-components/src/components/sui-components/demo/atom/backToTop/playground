const iconTop = () => (
  <svg width="100%" height="100%" viewBox="0 0 274 352">
    <g id="Page-1" stroke="none" fill="none">
      <g id="arrow_c_up_icon_128" fill="#000000">
        <path
          d="M9.4,109.3 L114.4,9 C120.2,3 128.1,0 136.8,0 C145.5,0 153.3,3 159.2,9 L264.6,109.3 C277.1,121.2 277.1,140.6 264.6,152.5 C252.1,164.4 231.9,164.4 219.4,152.5 L169,104.4 L169,321.4 C169,338.3 154.7,352 137,352 C119.3,352 105,338.3 105,321.4 L105,104.4 L54.6,152.6 C42.1,164.5 21.9,164.5 9.4,152.6 C-3.1,140.6 -3.1,121.3 9.4,109.3 Z"
          id="Shape"
        />
      </g>
    </g>
  </svg>
)

const Paragraph = () => (
  <p>
    Lorem ipsum dolor sit amet consectetur adipiscing, elit dignissim etiam
    congue ultricies. Commodo sociis massa a potenti dictumst turpis laoreet
    elementum, pulvinar hendrerit risus vivamus rhoncus etiam sapien congue sem,
    luctus tristique sagittis mollis ac convallis cubilia. Conubia dictum
    maecenas eleifend tincidunt nibh nam turpis fringilla vulputate, volutpat
    pretium neque platea phasellus tempus interdum habitant, sociis convallis
    taciti viverra aliquam nec metus auctor.
  </p>
)

const containerPlaygroundOld = document.querySelector('.sui-Studio-main')
const containerPlaygroundNew = document.querySelector('.Root')

class ContainerDemo extends React.Component {
  constructor() {
    super()
    this.state = {
      text:false,
      icon: true,
      paragraphs: 20,
      dark: false
    }
  }
  render() {
    const {dark, text, icon, paragraphs} = this.state
    const customProps = {}
    customProps.style = dark ? backToTopStyles.LIGHT : backToTopStyles.DARK
    if (text) {
      customProps.textTop = 'TOP'
    }
    if (icon) {
      customProps.iconTop = iconTop
    }
    
    return (
      <div>
        <div
          style={{
            display: 'flex',
            justifyContent: 'space-between',
            padding: '10px'
          }}
        >
          <button
            onClick={() => {
              this.setState({paragraphs: this.state.paragraphs + 20})
            }}
          >
            Add 20 paragraphs
          </button>
        </div>
        <div style={{display: 'flex', justifyContent: 'space-between', padding: '10px'}}>
          <div>
            <button
              onClick={() => {
                this.setState({dark: false})
              }}
              style={!dark ? {background: '#4d4d4d', color: 'white'} : {}}
            >
              Dark Mode
            </button>
            <button
              onClick={() => {
                this.setState({dark: true})
              }}
              style={dark ? {background: '#4d4d4d', color: 'white'} : {}}
            >
              Light Mode
            </button>
          </div>
          <div>
            <button
              onClick={() => {
                this.setState({text: false, icon: true})
              }}
              style={!text && icon ? {background: '#4d4d4d', color: 'white'} : {}}
            >
              Only Icon
            </button>
            <button
              onClick={() => {
                this.setState({text: true, icon: true})
              }}
              style={text && icon ? {background: '#4d4d4d', color: 'white'} : {}}
            >
              Icon + Text
            </button>
            <button
              onClick={() => {
                this.setState({text: true, icon: false})
              }}
              style={text && !icon ? {background: '#4d4d4d', color: 'white'} : {}}
            >
              Only Text
            </button>
          </div>
        </div>
        <div
          style={
            dark
              ? {
                  marginTop: '10px',
                  padding: '10px',
                  background: '#4d4d4d',
                  color: 'white'
                }
              : {padding: '10px'}
          }
        >
          {new Array(paragraphs)
            .fill(0)
            .map((elem, index) => <Paragraph key={index} />)}
        </div>
        <AtomBackToTop
          refContainer={containerPlaygroundOld || containerPlaygroundNew}
          {...customProps}
        />
      </div>
    )
  }
}

return (
  <div>
    <div id="container">
      <h1>Back To Top</h1>
      <ContainerDemo />
    </div>
  </div>
)

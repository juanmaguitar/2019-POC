/* eslint-disable react/prop-types, no-unused-vars, no-console */

const ErrorIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g id="b1ecb616-50e4-4ef2-b242-520a10daccd0" data-name="Layer 2"><g id="a2656784-54b8-454e-b8cb-7a1e3d1f894e" data-name="icons-fill-download"><path d="M13.42,12l4.79-4.8A1,1,0,1,0,16.8,5.79L12,10.58,7.21,5.79a1,1,0,0,0-1.41,0,1,1,0,0,0,0,1.41L10.59,12,5.8,16.79a1,1,0,0,0,.7,1.71,1,1,0,0,0,.71-.3L12,13.41l4.8,4.79a1,1,0,0,0,.7.3,1,1,0,0,0,.71-1.71Z"/><path d="M0,0H24V24H0Z" fill="none"/></g></g></svg>)

class StaticWithAnimation extends React.Component {

  static defaultProps = {
    type: "line"
  }

  constructor() {
    super()
    this.state = {
      percentage: 0
    }
    this.timeoutId = null
  }

  componentDidMount() {
    const {percentage} = this.props
    this.timeoutId = setTimeout(() => {
      this.setState({percentage})
    }, 1000)
  }

  componentWillUnount() {
    clearTimeout(this.timeoutId)
  }

  render() {
    const {percentage} = this.state
    const {type} = this.props
    return (
      <div style={{background: 'white', padding: '10px'}} >
        <AtomProgressBar {...this.props} type={type} percentage={percentage} />
      </div>
    )
  }
}

class DynamicProgressBar extends React.Component {
  static defaultProps = {
    topPercentage: 100,
    type: "line"
  }

  constructor() {
    super()
    this.state = {
      percentage: 0
    }
    this.intervalId = null
  }

  handleClick = () => {
    const {intervalTime} = this.props
    const {setProgress} = this
    this.setState(
      {
        percentage: 0
      },
      () => {
        this.intervalId = setInterval(setProgress, intervalTime)
      }
    )
  }

  componentWillUnmount() {
    clearInterval(this.intervalId)
  }

  setProgress = () => {
    const {percentage} = this.state
    let {step, topPercentage} = this.props
    if (!step) step = Math.ceil(Math.random() * (topPercentage - percentage))
    if (percentage < topPercentage) {
      this.setState({
        percentage: percentage + step
      })
    } else {
      clearInterval(this.intervalId)
    }
  }

  render() {
    const {percentage} = this.state
    const {intervalTime, step, type, ...props} = this.props
    return (
      <div style={{background: 'white', padding: '10px'}} >
        <button style={{marginBottom: '10px', display:'block'}} onClick={this.handleClick}>
          Start Progress
        </button>
        <AtomProgressBar percentage={percentage} type={type} {...props} />
      </div>
    )
  }
}

class InputRangeProgressBar extends React.Component {
  static defaultProps = {
    topPercentage: 100,
    type: "line"
  }

  constructor() {
    super()
    this.inputRangeRef = React.createRef()
    this.state = {
      percentage: 0
    }
  }

  handleInputRange = (e) => {
    const val = this.inputRangeRef.current.value
    this.setState({percentage: parseInt(val)})

  }

  setProgress = () => {
    const {percentage} = this.state
    let {step, topPercentage} = this.props
    if (!step) step = Math.ceil(Math.random() * (topPercentage - percentage))
    if (percentage < topPercentage) {
      this.setState({
        percentage: percentage + step
      })
    } else {
      clearInterval(this.intervalId)
    }
  }

  render() {
    const {percentage} = this.state
    const {step, type, ...props} = this.props
    return (
      <div style={{background: 'white', padding: '10px'}} >
        <input ref={this.inputRangeRef} style={{marginBottom: '10px', display:'block'}} onChange={this.handleInputRange} type="range" min="0" max="100" value={this.state.percentage} step={step}/>
        <AtomProgressBar percentage={percentage} type={type} {...props}/>
      </div>
    )
  }
}

const styleSection = {
  maxWidth: '500px'
}

return (
  <div>
    <h1>AtomLineProgressBar</h1>

    <div style={styleSection}>
      <h2>Dynamic</h2>
      <h4 style={{marginBottom: '2px'}} >Unique value with animation</h4>
      {/* <DynamicProgressBar topPercentage={65} step={65}  isAnimatedOnChange /> */}
      <StaticWithAnimation percentage={25} isAnimatedOnChange/>
      <h4 style={{marginBottom: '2px'}} >steps: random</h4>
      <DynamicProgressBar intervalTime={1000} indicatorTotal isAnimatedOnChange />
      <h4 style={{marginBottom: '2px'}} >steps: 25</h4>
      <DynamicProgressBar intervalTime={1000} step={25} isAnimatedOnChange />
      <h4 style={{marginBottom: '2px'}} >steps: 1 (smooth)</h4>
      <DynamicProgressBar intervalTime={1000 / 60} step={1} />
    </div>

    <div style={styleSection}>
      <h2>Basic</h2>
      <AtomProgressBar percentage={25} />
      <h2>Manual</h2>
      <InputRangeProgressBar step={1} />
    </div>

    <div style={styleSection}>
      <h2>Indicator Bottom</h2>
      <AtomProgressBar percentage={25} indicatorBottom />
    </div>

    <div style={styleSection}>
      <h2>Indicator Total</h2>
      <AtomProgressBar percentage={25} indicatorTotal />
    </div>

    <h1>AtomCircleProgressBar</h1>

    <div style={styleSection}>
      <h2>Dynamic</h2>
      <h4 style={{marginBottom: '2px'}} >Unique value with animation</h4>
      {/* <DynamicProgressBar topPercentage={65} step={65}  type="circle" isAnimatedOnChange /> */}
      <StaticWithAnimation percentage={25} type="circle" isAnimatedOnChange/>
      <h4 style={{marginBottom: '2px'}} >steps: random</h4>
      <DynamicProgressBar intervalTime={1000} type="circle" indicatorTotal isAnimatedOnChange />
      <h4 style={{marginBottom: '2px'}} >steps: 25</h4>
      <DynamicProgressBar intervalTime={1000} type="circle" step={25} isAnimatedOnChange />
      <h4 style={{marginBottom: '2px'}} >steps: 1 (smooth)</h4>
      <DynamicProgressBar intervalTime={1000/60} type="circle" step={1} />
    </div>

    <div style={styleSection}>
      <h2>Basic</h2>
      <div style={{background: 'white', padding: '10px'}} >
        <AtomProgressBar percentage={25} type="circle" />
      </div>
      <h2>With Error</h2>
      <h3>Large</h3>
      <div style={{background: 'white', padding: '10px'}} >
        <AtomProgressBar percentage={0} type="circle" status="error" errorIcon={<ErrorIcon/>}/>
      </div>
      <h3>Small</h3>
      <div style={{background: 'white', padding: '10px'}} >
        <AtomProgressBar percentage={0} type="circle" status="error" size="small" errorIcon={<ErrorIcon/>}/>
      </div>
      <h2>Loading</h2>
      <h3>Large</h3>
      <div style={{background: 'white', padding: '10px'}} >
        <AtomProgressBar percentage={0} type="circle" status="loading"/>
      </div>
      <h3>Small</h3>
      <div style={{background: 'white', padding: '10px'}} >
        <AtomProgressBar percentage={0} type="circle" size="small" status="loading"/>
      </div>
      <h2>Manual</h2>
      <h3>Large</h3>
      <InputRangeProgressBar type="circle" step={1} />
      <h3>Small</h3>
      <InputRangeProgressBar type="circle" size="small" step={1} />
    </div>
  </div>
)
